{"version":3,"sources":["./src/environments/environment.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/services/database.service.ts","./src/app/utility/types.ts","./src/app/components/job-interview/job-interview.component.ts","./src/app/components/job-interview/job-interview.component.html","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component } from '@angular/core';\n\n@Component({\n\tselector: 'app-root',\n\ttemplateUrl: './app.component.html',\n\tstyleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\ttitle = 'site';\n\n}","<div class=\"app mat-app-background darkMode\">\n\t<app-job-interview></app-job-interview>\n</div>","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { JobInterviewComponent } from './components/job-interview/job-interview.component';\n\n@NgModule({\n\tdeclarations: [\n\t\tAppComponent,\n\t\tJobInterviewComponent\n\t],\n\timports: [\n\t\tBrowserModule,\n\t\tBrowserAnimationsModule,\n\t\tMatSliderModule,\n\t\tMatButtonModule,\n\t\tMatCardModule,\n\t],\n\tproviders: [],\n\tbootstrap: [AppComponent]\n})\nexport class AppModule { }","import { Injectable } from '@angular/core';\nimport { WeaponType } from '../utility/types';\n\n// const url = `http://127.0.0.1:7100`\n// const url = `http://13.210.198.100:7000`\n\nconst ip = '13.210.246.148'\nconst port = `7000`\nconst url = `http://${ip}:${port}`\n\n@Injectable({\n\tprovidedIn: 'root'\n})\nexport class DatabaseService {\n\n\tconstructor() { }\n\n\tasync getWeapon(): Promise<WeaponType> {\n\t\tconst data = await fetch(`${url}/weapon`)\n\t\tconst json = await data.json()\n\t\tlet val = parseInt(json.weaponType)\n\t\tif (Number.isNaN(val))\n\t\t\tval = 0\n\t\tconsole.log(val);\n\t\treturn val\n\t}\n\n\tasync setWeapon(weaponType: WeaponType): Promise<void> {\n\t\tawait fetch(`${url}/weapon?type=${weaponType}`)\n\t}\n}\n","export enum WeaponType {\n\tNone,\n\tConfidence,\n\tExperience,\n\tRich\n}\n","import { Component, OnInit } from '@angular/core';\nimport { WeaponType } from 'src/app/utility/types';\nimport { DatabaseService } from '../../services/database.service';\n\nconst imageLookup = [\n\t\"../../../assets/question_white_192x192.png\",\n\t\"../../../assets/heart_white_192x192.png\",\n\t\"../../../assets/read_white_192x192.png\",\n\t\"../../../assets/dollar_white_192x192.png\",\n]\n\n@Component({\n\tselector: 'app-job-interview',\n\ttemplateUrl: './job-interview.component.html',\n\tstyleUrls: ['./job-interview.component.css']\n})\nexport class JobInterviewComponent implements OnInit {\n\tplayerName: string\n\tpublic get weaponType(): typeof WeaponType { return WeaponType; }\n\timgSrc = imageLookup[WeaponType.None]\n\tconstructor(private databaseService: DatabaseService) {\n\t\tthis.playerName = `Job Applicant #${Math.floor(Math.random() * 1000)}`\n\t\tthis.getWeapon()\n\t}\n\n\tasync getWeapon() {\n\t\tconst weaponType = await this.databaseService.getWeapon()\n\t\tthis.imgSrc = imageLookup[weaponType]\n\t}\n\n\tngOnInit(): void {\n\t}\n\n\tasync selectWeapon(weaponType: WeaponType) {\n\t\tthis.imgSrc = imageLookup[weaponType]\n\t\tawait this.databaseService.setWeapon(weaponType)\n\t}\n}\n","<div class=\"container\">\n\t<div class=\"content\">\n\t\t<h1>The Job Interview</h1>\n\t\t<mat-card>\n\t\t\t<!-- <mat-card-title>Weapon Select</mat-card-title> -->\n\t\t\t<mat-card-content>\n\t\t\t\t<p>\n\t\t\t\t\t{{playerName}} has a big adventure ahead. Select the weapon that {{playerName}} will bring.\n\t\t\t\t</p>\n\t\t\t</mat-card-content>\n\t\t\t<div class=\"image-container\">\n\t\t\t\t<img mat-card-image src={{imgSrc}} alt=\"icon\">\n\t\t\t</div>\n\t\t\t<mat-card-actions>\n\t\t\t\t<button (click)=\"selectWeapon(weaponType.Confidence)\" mat-raised-button>SELF CONFIDENCE</button>\n\t\t\t\t<button (click)=\"selectWeapon(weaponType.Experience)\" mat-raised-button>INDUSTRY EXPERIENCE</button>\n\t\t\t\t<button (click)=\"selectWeapon(weaponType.Rich)\" mat-raised-button>A RICH UNCLE</button>\n\t\t\t</mat-card-actions>\n\t\t</mat-card>\n\t</div>\n</div>","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}